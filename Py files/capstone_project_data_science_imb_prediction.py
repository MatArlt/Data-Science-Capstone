# -*- coding: utf-8 -*-
"""Capstone project - Data Science IMB - Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c8IyEyQwekX-YjQyZIpCmUHSiQlBYys2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
import requests
from io import BytesIO

def plot_confusion_matrix(y,y_predict):
    "this function plots the confusion matrix"
    from sklearn.metrics import confusion_matrix

    cm = confusion_matrix(y, y_predict)
    ax= plt.subplot()
    sns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells
    ax.set_xlabel('Predicted labels')
    ax.set_ylabel('True labels')
    ax.set_title('Confusion Matrix');
    ax.xaxis.set_ticklabels(['did not land', 'land']); ax.yaxis.set_ticklabels(['did not land', 'landed'])
    plt.show()

URL1 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"
URL2 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_3.csv"

resp1 = requests.get(URL1)
resp2 = requests.get(URL2)

text1 = BytesIO(resp1.content)
text2 = BytesIO(resp2.content)

data = pd.read_csv(text1)
X = pd.read_csv(text2)

#Create a NumPy array from the column Class in data, by applying the method to_numpy() then assign it to the variable Y,
#make sure the output is a Pandas series (only one bracket df['name of column']).

Y = data['Class'].to_numpy()

transform = preprocessing.StandardScaler()

X = transform.fit_transform(X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

Y_test.shape

"""# Logistic Regresion"""

parameters ={'C':[0.01,0.1,1],
             'penalty':['l2'],
             'solver':['lbfgs']}

lr=LogisticRegression()

logreg_cv = GridSearchCV(estimator=lr, param_grid=parameters, cv=10)
logreg_cv.fit(X_train, Y_train)

print("tuned hpyerparameters :(best parameters) ",logreg_cv.best_params_)
print("accuracy :",logreg_cv.best_score_)

logreg_cv.score(X_test, Y_test)

yhat_log=logreg_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat_log)

"""# SVM"""

parameters = {'kernel':('linear', 'rbf','poly','rbf', 'sigmoid'),
              'C': np.logspace(-3, 3, 5),
              'gamma':np.logspace(-3, 3, 5)}
svm = SVC()

svm_cv = GridSearchCV(svm, parameters, cv=10)

svm_cv.fit(X_train, Y_train)

print("Tuned hyperparameters (best parameters):", svm_cv.best_params_)
print("Accuracy:", svm_cv.best_score_)

svm_cv.score(X_test, Y_test)

yhat_svm=svm_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat_svm)

"""# Decision tree"""

parameters = {'criterion': ['gini', 'entropy'],
     'splitter': ['best', 'random'],
     'max_depth': [2*n for n in range(1,10)],
     'max_features': ['auto', 'sqrt'],
     'min_samples_leaf': [1, 2, 4],
     'min_samples_split': [2, 5, 10]}

tree = DecisionTreeClassifier()

tree_cv = GridSearchCV(tree, parameters, cv=10)
tree_cv.fit(X_train, Y_train)

print("Tuned hyperparameters (best parameters):", tree_cv.best_params_)
print("Accuracy:", tree_cv.best_score_)

tree_cv.score(X_test, Y_test)

yhat_tree = tree_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat_tree)

parameters = {
    'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],
    'p': [1, 2]
}

KNN = KNeighborsClassifier()

knn_cv = GridSearchCV(KNN, parameters, cv=10)

knn_cv.fit(X_train, Y_train)

print("Tuned hyperparameters (best parameters):", knn_cv.best_params_)
print("Accuracy:", knn_cv.best_score_)

knn_cv.score(X_test, Y_test)

yhat_knn = knn_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat_knn)

from sklearn.metrics import accuracy_score, f1_score

logreg_pred = logreg_cv.predict(X_test)
svm_pred = svm_cv.predict(X_test)
tree_pred = tree_cv.predict(X_test)
knn_pred = knn_cv.predict(X_test)

logreg_accuracy = accuracy_score(Y_test, logreg_pred)
svm_accuracy = accuracy_score(Y_test, svm_pred)
tree_accuracy = accuracy_score(Y_test, tree_pred)
knn_accuracy = accuracy_score(Y_test, knn_pred)

# Calculate F1 Score for each model
logreg_f1 = f1_score(Y_test, logreg_pred, average='weighted')
svm_f1 = f1_score(Y_test, svm_pred, average='weighted')
tree_f1 = f1_score(Y_test, tree_pred, average='weighted')
knn_f1 = f1_score(Y_test, knn_pred, average='weighted')

# Display the comparison
print(f"Logistic Regression - Accuracy: {logreg_accuracy}, F1: {logreg_f1}")
print(f"SVM - Accuracy: {svm_accuracy}, F1: {svm_f1}")
print(f"Decision Tree - Accuracy: {tree_accuracy}, F1: {tree_f1}")
print(f"KNN - Accuracy: {knn_accuracy}, F1: {knn_f1}")

model_names = ['Logistic Regression', 'SVM', 'Decision Tree', 'KNN']
accuracies = [logreg_accuracy, svm_accuracy, tree_accuracy, knn_accuracy]

# Create a DataFrame
df_accuracy = pd.DataFrame({
    'Model': model_names,
    'Accuracy': accuracies
})

# Plotting the bar chart
plt.figure(figsize=(10, 6))
plt.bar(df_accuracy['Model'], df_accuracy['Accuracy'], color=['blue', 'green', 'red', 'purple'])
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.title('Comparison of Model test accyracy')
plt.ylim(0, 1)  # To ensure the accuracy scale goes from 0 to 1
plt.show()

model_names = ['Logistic Regression', 'SVM', 'Decision Tree', 'KNN']
accuracies = [logreg_cv.best_score_, svm_cv.best_score_, tree_cv.best_score_, knn_cv.best_score_]

# Create a DataFrame
df_accuracy = pd.DataFrame({
    'Model': model_names,
    'Train Accuracy': accuracies
})

# Plotting the bar chart
plt.figure(figsize=(10, 6))
bars = plt.bar(df_accuracy['Model'], df_accuracy['Train Accuracy'], color=['blue', 'green', 'red', 'purple'])
plt.xlabel('Model')
plt.ylabel('Train Accuracy')
plt.title('Comparison of Model train accuracy')
plt.ylim(0, 1)  # To ensure the accuracy scale goes from 0 to 1

for bar in bars:
    yval = bar.get_height()  # Get the height of the bar (accuracy value)
    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.02,  # Position of text
             f'{yval:.2f}',  # Display value with 2 decimal places
             ha='center', va='bottom', fontsize=12)  # Horizontal and vertical alignment of text


plt.show()

